{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// ファイルシステムからデータを取得するための簡単なライブラリ\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html'; // postディレクレリの中にあるpre-rendering.md と ssg-ssr.mdのパスを\n// 定数postsDirectoryに代入する\n\nconst postsDirectory = path.join(process.cwd(), 'posts');\nexport function getSortedPostsData() {\n  // /posts　配下のファイル名を取得する\n  const fileNames = fs.readdirSync(postsDirectory); // [ 'pre-rendering.md', 'ssg-ssr.md' ]\n\n  const allPostsData = fileNames.map(fileName => {\n    // id を取得するためにファイル名から \".md\" を削除する\n    const id = fileName.replace(/\\.md$/, ''); // マークダウンファイルを文字列として読み取る\n\n    const fullPath = path.join(postsDirectory, fileName); // C:\\Users\\中村友哉\\practice\\nextjs-blog\\nextjs-blog\\posts\\pre-rendering.md\n    // C:\\Users\\中村友哉\\practice\\nextjs-blog\\nextjs-blog\\posts\\ssg-ssr.md\n\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n    console.log(fileContents); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  // pre-rendering と ssg-ssr.mdのファイル名を取得する\n  const fileNames = fs.readdirSync(postsDirectory); //  Returns an array that looks like this:\n  //  [\n  //    {\n  //      params: {\n  //        id: 'ssg-ssr'\n  //       }\n  //     },\n  //     {\n  //      params: {\n  //         id: 'pre-rendering'\n  //       }\n  //    }\n  //  ]\n  // fileNamesは配列なのでmapでイテレートするできる\n  // イテレートの結果が上記の配列\n\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '') //拡張子.mdを削る\n\n      }\n    };\n  });\n} // ファイルの中身を読み込んでgray-matterでパースする\n// remarkメソッドを非同期処理で使用したいのでasync/awaitを使用する\n\nexport async function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString(); // Combine the data with the id and contentHtml\n\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["C:/Users/中村友哉/practice/nextjs-blog/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","console","log","matterResult","data","sort","a","b","date","getAllPostIds","params","getPostData","processedContent","use","content","contentHtml","toString"],"mappings":";;;;;;AAAA;AAEA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAEA;AACA;;AACA,MAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC;AACA,QAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB,CAFmC,CAEc;;AACjD,QAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAC7C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF6C,CAI7C;;AACA,UAAMC,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB,CAL6C,CAM7C;AACA;;AACA,UAAMI,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ,EAT6C,CAW7C;;AACA,UAAMI,YAAY,GAAGpB,MAAM,CAACgB,YAAD,CAA3B,CAZ6C,CAc7C;;AACA;AACEH,MAAAA;AADF,OAEKO,YAAY,CAACC,IAFlB;AAID,GAnBoB,CAArB,CAHmC,CAuBnC;;AACA,SAAOX,YAAY,CAACY,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD;AAED,OAAO,SAASC,aAAT,GAAyB;AAC9B;AACA,QAAMlB,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB,CAF8B,CAI9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,SAAOK,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAC/B,WAAO;AACHe,MAAAA,MAAM,EAAE;AACJd,QAAAA,EAAE,EAAED,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CADA,CAC+B;;AAD/B;AADL,KAAP;AAKD,GANM,CAAP;AAOD,C,CAED;AACA;;AACA,OAAO,eAAec,WAAf,CAA2Bf,EAA3B,EAA+B;AACpC,QAAME,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA2B,GAAEU,EAAG,KAAhC,CAAjB;AACA,QAAMG,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAFoC,CAIpC;;AACA,QAAMK,YAAY,GAAGpB,MAAM,CAACgB,YAAD,CAA3B,CALoC,CAOpC;;AACA,QAAMa,gBAAgB,GAAG,MAAM5B,MAAM,GAClC6B,GAD4B,CACxB5B,IADwB,EAE5BG,OAF4B,CAEpBe,YAAY,CAACW,OAFO,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB,CAXoC,CAapC;;AACA;AACEpB,IAAAA,EADF;AAEEmB,IAAAA;AAFF,KAGKZ,YAAY,CAACC,IAHlB;AAKD","sourcesContent":["// ファイルシステムからデータを取得するための簡単なライブラリ\r\n\r\nimport fs from 'fs'\r\nimport path from 'path'\r\nimport matter from 'gray-matter'\r\nimport remark from 'remark'\r\nimport html from 'remark-html'\r\n\r\n// postディレクレリの中にあるpre-rendering.md と ssg-ssr.mdのパスを\r\n// 定数postsDirectoryに代入する\r\nconst postsDirectory = path.join(process.cwd(), 'posts')\r\n\r\nexport function getSortedPostsData() {\r\n  // /posts　配下のファイル名を取得する\r\n  const fileNames = fs.readdirSync(postsDirectory) // [ 'pre-rendering.md', 'ssg-ssr.md' ]\r\n  const allPostsData = fileNames.map(fileName => {\r\n    // id を取得するためにファイル名から \".md\" を削除する\r\n    const id = fileName.replace(/\\.md$/, '')\r\n\r\n    // マークダウンファイルを文字列として読み取る\r\n    const fullPath = path.join(postsDirectory, fileName)\r\n    // C:\\Users\\中村友哉\\practice\\nextjs-blog\\nextjs-blog\\posts\\pre-rendering.md\r\n    // C:\\Users\\中村友哉\\practice\\nextjs-blog\\nextjs-blog\\posts\\ssg-ssr.md\r\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n    console.log(fileContents);\r\n\r\n    // Use gray-matter to parse the post metadata section\r\n    const matterResult = matter(fileContents)\r\n\r\n    // Combine the data with the id\r\n    return {\r\n      id,\r\n      ...matterResult.data\r\n    }\r\n  })\r\n  // Sort posts by date\r\n  return allPostsData.sort((a, b) => {\r\n    if (a.date < b.date) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  })\r\n}\r\n\r\nexport function getAllPostIds() {\r\n  // pre-rendering と ssg-ssr.mdのファイル名を取得する\r\n  const fileNames = fs.readdirSync(postsDirectory)\r\n\r\n  //  Returns an array that looks like this:\r\n  //  [\r\n  //    {\r\n  //      params: {\r\n  //        id: 'ssg-ssr'\r\n  //       }\r\n  //     },\r\n  //     {\r\n  //      params: {\r\n  //         id: 'pre-rendering'\r\n  //       }\r\n  //    }\r\n  //  ]\r\n\r\n  // fileNamesは配列なのでmapでイテレートするできる\r\n  // イテレートの結果が上記の配列\r\n  return fileNames.map(fileName => {\r\n    return {\r\n        params: {\r\n            id: fileName.replace(/\\.md$/, '')　　//拡張子.mdを削る\r\n        }\r\n    }\r\n  })\r\n}\r\n\r\n// ファイルの中身を読み込んでgray-matterでパースする\r\n// remarkメソッドを非同期処理で使用したいのでasync/awaitを使用する\r\nexport async function getPostData(id) {\r\n  const fullPath = path.join(postsDirectory, `${id}.md`)\r\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n  // Use gray-matter to parse the post metadata section\r\n  const matterResult = matter(fileContents)\r\n\r\n  // Use remark to convert markdown into HTML string\r\n  const processedContent = await remark()\r\n    .use(html)\r\n    .process(matterResult.content)\r\n  const contentHtml = processedContent.toString()\r\n\r\n  // Combine the data with the id and contentHtml\r\n  return {\r\n    id,\r\n    contentHtml,\r\n    ...matterResult.data\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}